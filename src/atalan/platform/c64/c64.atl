;********************************
;ATALAN C64 Platform definition
;********************************

;Define, which processor the platform uses.

use m6502

;prologue is emitted at the beginning of the generated assmbler file.
;Here you can define header of output binary and the starting address of an application.
;                                                                        800 801 802 803 804 805
;rule prologue = "   .segment ["]FS["]" "   .byt $00,$08" "   .segment ["]CODE["]" "_CODE_START:" "   .byt $00,$0b,$08,$40,$00,$9e,["]2062["],$00,$00,$00,$00"
rule prologue = ".export __LOADADDR__,__EXEHDR__" "" ".segment ["]LOADADDR["]" "__LOADADDR__=$0801" "   .byt <__LOADADDR__,>__LOADADDR__" "" ".segment ["]EXEHDR["]" "__EXEHDR__:" "   .byt $0b,$08,$40,$00,$9e,["]2060["],$00,$00" "" ".segment ["]CODE["]"

;epilogue is emitted at the end of code. 
rule epilogue = "   rts"

;code_end is instruction emitted after the end of code.
rule code_end = "_CODE_END:"     
rule line      = ";### %0(%1) %2"

;BIN_EXTENSION defines extension of the resulting binary file produced by compiler.
BIN_EXTENSION: "prg"

system.putchr_proc_adr@$c3:adr
system.buf@$7e8:adr ; for bcd translation

;VARHEAP defines memory area that can be used by Atalan to allocate variables.
;this area memory is used mainly by BASIC, so it is safe to use
type VARHEAP:3..143

;********************************
; Various vectors                
;********************************
Vectors:scope =                  
	in out irq@$314:adr      
	in out brk@$316:adr      
	in out nmi@$318:adr
	in out open@$31A:adr
	in out close@$31C:adr
	chkin@$31E:adr
	; there are more. Add here.

;********************************
; Useful types
;********************************		
type Device: enum
	kbd : 0
	tap : 1
	rs  : 2
	scr : 3
	pr1 : 4
	pr2 : 5
	pr3 : 6
	pr4 : 7
	fd8 : 8
	fd9 : 9
	fd10 : 10
	fd11 : 11
	fd12 : 12
 
type Color: enum 
	black
	white
	red
	cyan
	purple
	green
	blue
	yellow
	orange
	brown
	lightred
	garkgrey
	grey
	lightgreen
	lightblue
	lightgrey
 
type Sprite:0..7

type RowType:0..24
type ColType:0..39
type FileNameLen:0..15

; Another way to define types - what's the difference?
;type dma'type:byte (narrow_playfield: 1, playfield: 2, wide_playfield: 3, missiles: 4, players: 8, hires_sprites: 16, dl: 32, off: 0)
 
;********************************
; System Arrays
;********************************
in out screenMemory@1024:array(ColType,RowType) of byte 
in out keyboardBuffer@631:array(0..9) of byte

;********************************
; Zeropage
;********************************
ZP:scope = 
	in out fileStatus @$90:byte
	in out secondaryFileAddress @$b9:byte
	in keyboardBufferSize@$c6:byte

;********************************
; VIC
;********************************
Vic:scope =
	in out spriteX@$d000:array(Sprite) of byte
	in out spriteY@$d001:array(Sprite) of byte

	in out sprite1X@$d000:byte
	in out sprite1Y@$d001:byte

	in out spriteXH@$d010:byte
	in out scrCtrlReg1@$d011:byte ; 0-2 scroll, 3 24/25, 4 screen off, 5 text/bitmap, 6 extbkg, 7 raser Hi
	in out rasterLine@$d012:byte
	in out spriteOnOff@$d015:byte
	in out scrCtrlReg2@$d016:byte ; 0-2 h scroll, 3 38/40, 4 multicolor
	in out spriteTall@$d017:byte
	in out irqStateReg@$d019:byte ; irq status/ack
	in out irqCtrlReg@$d01a:byte ; 0 raster, 1 sprite/bkg coll, 2 sprite/sprite coll, 3 - lightpen
	spriteWide@$d01d:byte
	borderColor @$d020:Color
	backgroundColor @$d021:Color
	spriteColor@$d027:array(Sprite) of Color

	setSpriteVisible:macro sprite:Sprite,enabled:bool =
		vic.spriteOnOff$sprite = enabled

	setSpriteTall:macro sprite:Sprite,tall:bool =
		vic.spriteTall$sprite = tall
		
	setSpriteWide:macro sprite:Sprite,wide:bool =
		vic.spriteWide$sprite = wide
	
	setSpriteColor:macro sprite:Sprite,col:Color =
		vic(sprite).spriteColor = col
	
	setSprite0X:macro x:card =
		vic(0).spriteX = lo x
		if x > 255 then spriteXH$0 = 1 else spritesXH$0 = 0
	setSprite1X:macro x:card =
		vic(2).spriteX = lo x
		if x > 255 then spriteXH$1 = 1 else spritesXH$1 = 0
	setSprite2X:macro x:card =
		vic(4).spriteX = lo x
		if x > 255 then spriteXH$2 = 1 else spritesXH$2 = 0
	setSprite3X:macro x:card =
		vic(6).spriteX = lo x
		if x > 255 then spriteXH$3 = 1 else spritesXH$3 = 0
	setSprite4X:macro x:card =
		vic(8).spriteX = lo x
		if x > 255 then spriteXH$4 = 1 else spritesXH$4 = 0
	setSprite5X:macro x:card =
		vic(10).spriteX = lo x
		if x > 255 then spriteXH$5 = 1 else spritesXH$5 = 0
	setSprite6X:macro x:card =
		vic(12).spriteX = lo x
		if x > 255 then spriteXH$6 = 1 else spritesXH$6 = 0
	setSprite7X:macro x:card =
		vic(14).spriteX = lo x
		if x > 255 then spriteXH$7 = 1 else spritesXH$7 = 0

	setSprite0Y:macro y:byte =
		vic(0).spriteY = y
	setSprite1Y:macro y:byte =
		vic(2).spriteY = y
	setSprite2Y:macro y:byte =
		vic(4).spriteY = y
	setSprite3Y:macro y:byte =
		vic(6).spriteY = y
	setSprite4Y:macro y:byte =
		vic(8).spriteY = y
	setSprite5Y:macro y:byte =
		vic(10).spriteY = y
	setSprite6Y:macro y:byte =
		vic(12).spriteY = y
	setSprite7Y:macro y:byte =
		vic(14).spriteY = y
						
	moveSprite0Y:macro delta:sbyte =
		vic(0).spriteY = vic(1).spriteY + delta

	moveSprite0X:macro delta:sbyte =
		vic(0).spriteX = vic(0).spriteX + delta

	; sprity mają pointery pod: ekran + 1016 do +7
	; w nich zapisane są adresy spriteów /64
	
;********************************
; CIA 1
;********************************
Joystick: enum
	up : 1
	down : 2
	left : 4
	right : 8
	fire : 16

Cia1:scope =
	in out portA@$dc00:byte
	in out portB@$dc01:byte
	in out irqControlReg@$dc0d:byte

Cia2:scope =
	in out irqControlReg@$dd0d:byte
;********************************
; IRQ procedures
;********************************
IrqProc:type = interrupt

rule proc %A:IrqProc = ".proc %A"
  
rule return %A:IrqProc = "   asl vic.irqStateReg" "   jmp $ea31"

rule endproc %A:IrqProc = ".endproc"

onIrqDo:macro procAddress:adr of IrqProc =
	blockIrqFlag@CPU.i
	blockIrqFlag = 1
	Cia1.irqControlReg = 255
	Vectors.irq = procAddress
	blockIrqFlag = 0

onRasterLineDo:macro rasterLine:card, procAddress:adr of IrqProc =
	Cia1.irqControlReg = $7f
	Cia2.irqControlReg = $7f
	Vic.scrCtrlReg1 = %1111
	Vic.rasterLine = lo rasterLine
	if rasterLine > 255 Vic.scrCtrlReg1$7 = 1 else Vic.scrCtrlReg1$7 = 0
	Vectors.irq = procAddress
	Vic.irqCtrlReg = 1

;********************************
; NMI procedures
;********************************
NmiProc:type = interrupt

rule proc %A:NmiProc = ".proc %A" "   pha" "   txa"  "   pha" "   tya" "   pha"
  
rule return %A:NmiProc = "   pla" "   tay" "   pla" "   tax" "   pla" "   rti"
  
rule endproc %A:NmiProc = ".endproc"

onNmiDo:macro procAddress:adr of NmiProc =
	Vectors.nmi = procAddress

;********************************
; KERNAL FUNCTIONS
;********************************
KScnKey@$ff9f:proc                 -> matrix@$cb shift@$28d petsci@keyboardBuffer @cpu.a @cpu.x @cpu.y
KIecIn@$ffa5: proc                 -> b:byte@cpu.a
KChrIn@$ffcf: proc                 -> b:byte@cpu.a                                @cpu.a @cpu.y
KRdTim@$ffde: proc                 -> t1:byte@cpu.a t2:byte@cpu.x t3:byte@cpu.y   @cpu.a @cpu.x @cpu.y
KStop@$ffe1:  proc                 -> pressed@cpu.z pressed2@cpu.c                @cpu.a @cpu.x
KGetin@$ffe4: proc                 -> c:char@cpu.a                                @cpu.a
KGetCursor:   proc                 -> x:ColType@cpu.x y:RowType@cpu.y             @cpu.c
KReadSt@$ffb7:proc                 -> st@cpu.a                                    @cpu.a
KLoad@$ffd5:  proc lv:byte@cpu.a startAddr@(CPU.x,CPU.y):adr     -> state@cpu.c error@cpu.a lastByte@(cpu.x,cpu.y):adr  @cpu.a @cpu.x @cpu.y
; startAddr - zero page address of pointer
KSave@$ffd8:  proc startAddr:byte@cpu.a endAddr@(CPU.x,CPU.y):adr-> state@cpu.c error@cpu.a                             @cpu.a @cpu.x @cpu.y

;********************************
; KERNAL PROCEDURES
;********************************
KScInit@$ff81:proc                                                @cpu.a @cpu.x @cpu.y
KIOInit@$ff84:proc                                                @cpu.a @cpu.x
KRAMTas@$ff87:proc                                                @cpu.a @cpu.x @cpu.y
KLstnSA@$ff93:proc sa:byte@cpu.a                                  @cpu.a
KTalkSA@$ff96:proc sa:byte@cpu.a                                  @cpu.a
KIecOut@$ffa8:proc b:byte@cpu.a
KUntalk@$ffab:proc                                                @cpu.a
KUnlstn@$ffae:proc                                                @cpu.a
KListen@$ffb1:proc dev:Device@cpu.a                               @cpu.a
KTalk@$ffb4:  proc dev:Device@cpu.a                               @cpu.a
KSetLFS@$ffba:proc ln:byte@cpu.a dev:Device@cpu.x sa:byte@cpu.y
KSetNam@$ffbd:proc len:FileNameLen@cpu.a name@(CPU.x,CPU.y):adr
KOpen@$ffc0:  proc                                                @cpu.a @cpu.x @cpu.y
KClose@$ffc3: proc lfn:byte@cpu.a                                 @cpu.a @cpu.x @cpu.y
KChkIn@$ffc6: proc lfn:byte@cpu.x                                 @cpu.a @cpu.x
KChkOut@$ffc9:proc lfn:byte@cpu.x                                 @cpu.a @cpu.x
KClrChn@$ffcc:proc                                                @cpu.a @cpu.x
KChrOut@$ffd2:proc c:char@cpu.a
KSetTim@$ffbd:proc t1:byte@cpu.a t2:byte@cpu.x t3:byte@cpu.y
KClAll@$ffe7: proc                                                @cpu.a @cpu.x
KSetCursor:   proc x:ColType@CPU.x y:RowType@CPU.y                @cpu.c
